{"version":3,"sources":["khplayer.js"],"names":["KHPlayer","d","e","document","querySelector","id","getElementById","[object Object]","length","result","characters","charactersLength","i","charAt","Math","floor","random","btoa","Date","getTime","replace","this","insertAfter","currNode","getAttribute","loadCSS","Plyr","loadJS","Hls","NoSleep","initPlayer","setInterval","clearInterval","uniqueKey","randomString","nextElementSibling","setAttribute","init","previewThumbnails","customConfig","Object","assign","configurator","enabled","src","Promise","resolve","setup","khpCtn","data","getJSON","PLAYLIST","poster","defaultPoster","historyPlayingIndicator","innerHTML","index","elem","createElement","title","appendChild","plyr","initPlyr","tweaks","playingData","localStorage","getItem","playingDataJSON","JSON","parse","confirmi18n","i18n","continueWatchingConfirm","continueWatching","epIndex","at","time","toISOString","substr","confirm","yes","no","addEventListener","a","classList","contains","source","click","toggleEmbedPlayllist","nextEpisode","insertBefore","previousEpisode","string2Node","cloneNode","remove","parentNode","ep","querySelectorAll","removeAttribute","currData","destroy","currVideoTag","currMedia","sources","type","toUpperCase","m3u8","tracks","track","addSubsForLibsPlayer","play","limitPlyrListHeight","selectPlyr","typeSelect","typeSelectCtn","setMaxHeight","style","maxHeight","parseInt","window","getComputedStyle","height","overflow","add","loopCheckMediaLoaded","readyState","item","on","next_episode","selectCurrEp","saveCurrTimeEp","setItem","stringify","round","currentTime","adjustSpeed","event","shiftKey","keyCode","speed","removeEventListener","enable","hideOnly","string2Elem","nextSibling","nextOrPrev","currEp","nextEp","prevEp","previousElementSibling","tempLoop","isSupported","hls","loadSource","attachMedia","Events","MANIFEST_PARSED","console","log","Error","url","request","XMLHttpRequest","open","onreadystatechange","status","responseText","send","label","srclang","html","template","trim","content","firstChild","link","rel","href","head","callback","script","onload","currentScript","customConfigPath","defaultQuality","seekTime","invertTime","captions","active","language","update","tooltips","controls","seek","blankVideo","async","configURL","customConfigData","lang","lang_vi","restart","rewind","pause","fastForward","seekLabel","played","buffered","duration","volume","mute","unmute","enableCaptions","disableCaptions","download","enterFullscreen","exitFullscreen","frameTitle","settings","pip","menuBack","normal","quality","loop","start","end","all","reset","disabled","advertisement","qualityBadge","2160","1440","1080","720","576","480","lang_en","one"],"mappings":"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","sourcesContent":["/* eslint-disable max-len */\r\n// ! ================================================\r\n// ! KHPLayer\r\n// ! Version: 6.4\r\n// ! Homepage: https://khplayer.delnegend.com\r\n// ! License: The MIT License (MIT)\r\n// ! ================================================\r\n// jshint esversion: 9\r\n// jshint expr:true\r\n\r\nconst KHPlayer = {\r\n  d(e) {\r\n    return document.querySelector(e);\r\n  },\r\n  id(e) {\r\n    return document.getElementById(e);\r\n  },\r\n  // Source: https://stackoverflow.com/a/1349426\r\n  randomString(length = 20) {\r\n    let result = '';\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    const charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    return '_' + result + btoa(new Date().getTime()).replace(/=/g, '');\r\n  },\r\n  one() {\r\n    this.insertAfter(this.currNode, `<khplayer-container data=\"${this.currNode.getAttribute('data')}\"></khplayer-container>`, true);\r\n    this.loadCSS('https://cdn.jsdelivr.net/gh/sampotts/plyr/dist/plyr.css');\r\n    this.loadCSS('https://cdn.jsdelivr.net/gh/DELNEGEND/khplayer/dist/khplayer.min.css');\r\n    if (typeof Plyr === 'undefined') this.loadJS('https://cdn.jsdelivr.net/gh/sampotts/plyr/dist/plyr.min.js');\r\n    if (typeof Hls === 'undefined') this.loadJS('https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js');\r\n    if (typeof NoSleep === 'undefined') this.loadJS('https://cdn.jsdelivr.net/gh/richtr/NoSleep.js/dist/NoSleep.min.js');\r\n    const initPlayer = setInterval(() => {\r\n      const check = typeof Plyr && typeof Hls && typeof NoSleep;\r\n      if (check !== 'undefined') {\r\n        clearInterval(initPlayer);\r\n        const uniqueKey = KHPlayer.randomString();\r\n        this.currNode.nextElementSibling.setAttribute('id', uniqueKey);\r\n        this.init(uniqueKey);\r\n      }\r\n    }, 100);\r\n  },\r\n  // Init Plyr\r\n  initPlyr(uniqueKey, previewThumbnails = false) {\r\n    // If prevThumbnails's url exist in need-to-init episode, add it into customConfig - cloned from the original config to avoid adding into the original one\r\n    const customConfig = Object.assign({}, this.configurator);\r\n    if (previewThumbnails) {\r\n      customConfig.previewThumbnails = {\r\n        enabled: true,\r\n        src: previewThumbnails.src,\r\n      };\r\n    }\r\n    return new Promise(function(resolve) {\r\n      resolve(Plyr.setup('#' + uniqueKey + ' video', customConfig));\r\n    });\r\n  },\r\n  // Hàm khởi tạo KHPlayer ở đây\r\n\r\n  // KHPlayer init() here\r\n  // NOTE: in changeEp(), Plyr get destroy() and init() again with new data, anything that related or sit inside Plyr are also destroyed (embed playlist and its toggle btn, next/prev btn, eventListener...), This init() only run once to initiate stuffs outside Plyr's reach, so if you're planning to add any button into Plyr's container or an eventListener, consider using changeEp() or tweaks()\r\n  async init(uniqueKey) {\r\n    const\r\n      khpCtn = this.id(uniqueKey);\r\n    // Gán dữ liệu vào KHPLayer để lát chuyển tập dùng lại\r\n    // Assign data into KHPlayer for re-using in changeEp()\r\n    this.data[uniqueKey] = await this.getJSON(khpCtn.getAttribute('data'));\r\n    // Syntax ngắn hơn\r\n    // Shorter syntax\r\n    PLAYLIST = this.data[uniqueKey];\r\n    // Getting poster and playingIndicator\r\n    // Lấy url Poster, playingIndicator\r\n    const poster = PLAYLIST[PLAYLIST.length - 2] || this.configurator.defaultPoster;\r\n    const historyPlayingIndicator = PLAYLIST[PLAYLIST.length - 1];\r\n    // Create a frame for Plyr to init\r\n    // Tạo 1 cái frame cho Plyr bên trong container player\r\n    khpCtn.innerHTML = /* html */ `\r\n        <video control playsinline></video>\r\n        <ul key=\"${uniqueKey}\" class='KHPPlaylistContainer custom_scrollbar'></ul>`;\r\n    // Set poster\r\n    khpCtn.querySelector('video').setAttribute('poster', poster);\r\n    // Tạo playlist dựa trên dữ liệu JSON\r\n    // Create playlist based on JSON data\r\n    for (let index = 0; index < PLAYLIST.length - 2; index++) {\r\n      const\r\n        elem = document.createElement('li');\r\n      elem.setAttribute('onclick', `KHPlayer.changeEp(this,${index})`);\r\n      elem.innerHTML = PLAYLIST[index].title;\r\n      khpCtn.querySelector(`.KHPPlaylistContainer`).appendChild(elem);\r\n    }\r\n\r\n    // -- Plyr đc khởi tạo ở chỗ này --\r\n    // -- Plyr get init here --\r\n    this.plyr[uniqueKey] = await this.initPlyr(uniqueKey);\r\n    this.id(uniqueKey) && this.tweaks(uniqueKey);\r\n\r\n    // -- Phần này detect lịch sử xem --\r\n    // #region -- Detect watching history --\r\n    const playingData = localStorage.getItem('khplayer_playing_' + historyPlayingIndicator);\r\n    if (playingData) {\r\n      const playingDataJSON = JSON.parse(playingData);\r\n      const confirmi18n = this.configurator.i18n.continueWatchingConfirm;\r\n      // Source: timestamp --> regular: https://stackoverflow.com/a/25279340\r\n      this.insertAfter(\r\n        khpCtn.querySelector(' .plyr>.plyr__control'),\r\n        /* html */ `<div class=\"systemDetectHistory\">\r\n          <div class=\"text\">\r\n          ${confirmi18n.continueWatching} <b>${KHPlayer.data[uniqueKey][playingDataJSON.epIndex].title}</b> ${confirmi18n.at} <b>${new Date(playingDataJSON.time * 1000).toISOString().substr(11, 8)}</b>${confirmi18n.confirm}\r\n          </div>\r\n          <div class=\"actions\">\r\n            <div class=\"confirmBtn\">\r\n              <div onclick='KHPlayer.acceptContinue(\"${uniqueKey}\", ${playingDataJSON.epIndex}, ${playingDataJSON.time})' class=\"buttonInner\">${confirmi18n.yes}</div>\r\n            </div>\r\n            <div class=\"confirmBtn\">\r\n              <div onclick='KHPlayer.rejectContinue(this)' class=\"buttonInner\">${confirmi18n.no}</div>\r\n            </div>\r\n          </div>\r\n        </div>`,\r\n        true,\r\n      );\r\n      khpCtn.querySelector('.plyr>.plyr__controls') && khpCtn.querySelector('.plyr>.plyr__controls').setAttribute('hidden', '');\r\n    }\r\n    // #endregion\r\n\r\n    khpCtn.querySelector('.plyr').addEventListener('click', () => {\r\n      if (playingData) {\r\n        const a = khpCtn.querySelector('.systemDetectHistory');\r\n        if (a && a.classList.contains('hideAlert') && !this.plyr[uniqueKey][0].source) {\r\n          khpCtn.querySelector('ul.KHPPlaylistContainer>li:first-child').click();\r\n        }\r\n      } else {\r\n        if (!this.plyr[uniqueKey][0].source) {\r\n          khpCtn.querySelector('ul.KHPPlaylistContainer>li:first-child').click();\r\n        }\r\n      }\r\n    });\r\n  },\r\n  tweaks(uniqueKey) {\r\n    const khpCtn = this.id(uniqueKey);\r\n\r\n    // Thêm vài nút chức năng vào Plyr\r\n    // #region adding a few button into Plyr's container\r\n\r\n    // Nút ẩn/hiện embed playlist\r\n    // Toggle embed playlist btn\r\n    // <i class=\"fas fa-bars fa-lg\"></i>\r\n\r\n    this.insertAfter(\r\n      khpCtn.querySelector('.plyr__controls>.plyr__menu'),\r\n      `<button class=\"plyr__controls__item plyr__control customBtn\" type=\"button\" onclick=\"KHPlayer.toggleEmbedPlayllist('${uniqueKey}')\">\r\n      <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"list-ul\" class=\"svg-inline--fa fa-list-ul fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M48 48a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm0 160a48 48 0 1 0 48 48 48 48 0 0 0-48-48zm448 16H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zm0-320H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16V80a16 16 0 0 0-16-16zm0 160H176a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h320a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16z\"></path></svg>\r\n      <span class=\"plyr__tooltip\">${this.configurator.i18n.toggleEmbedPlayllist}</span>\r\n      </button>`,\r\n      true,\r\n    );\r\n    // Nút next tập\r\n    // Next episode btn\r\n    // <i class=\"fas fa-step-forward fa-lg\"></i>\r\n    this.insertAfter(\r\n      khpCtn.querySelector('.plyr__controls > button:first-child'),\r\n      `<button class=\"plyr__controls__item plyr__control customBtn nextEpBtn\" type=\"button\" onclick=\"KHPlayer.navigateEp(this,'next')\">\r\n      <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"step-forward\" class=\"svg-inline--fa fa-step-forward fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z\"></path></svg>\r\n      <span class=\"plyr__tooltip\">${this.configurator.i18n.nextEpisode}</span>\r\n      </button>`,\r\n      true,\r\n    );\r\n    // Nút previous tập\r\n    // Previous episode btn\r\n    // <i class=\"fas fa-step-backward fa-lg\"></i>\r\n    this.insertBefore(\r\n      khpCtn.querySelector('.plyr__controls > button:first-child'),\r\n      `<button class=\"plyr__controls__item plyr__control customBtn prevEpBtn\" type=\"button\" onclick=\"KHPlayer.navigateEp(this,'prev')\">\r\n      <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"step-backward\" class=\"svg-inline--fa fa-step-backward fa-w-14\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path fill=\"currentColor\" d=\"M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z\"></path></svg>\r\n      <span class=\"plyr__tooltip\">${this.configurator.i18n.previousEpisode}</span>\r\n      </button>`,\r\n      true,\r\n    );\r\n    // #endregion\r\n\r\n    // #region Embed playlist\r\n    /* Source:\r\n      https://stackoverflow.com/a/18602389\r\n      https://www.w3schools.com/jsref/met_node_clonenode.asp\r\n    Cấu trúc Playlist mới trong Player để overlay nút đóng playlist lên trên playlist:\r\n    // DOM structure in order to overlay close btn over embed playlist\r\n\r\n    <div class=\"embed-playlist\"> -> position: absolute -> chiếm trọn ô chứa Plyr | took over Plyr's container\r\n      <div> -> position: relative -> để cái nút đóng playlist hiện trên cùng | For overlaying close btn over embed playlist\r\n        <ul></ul> -> position: relative\r\n        <div>Nút đóng playlist | Hide embed playlist btn</div> -> position: absolute -> góc trên bên phải | sitting at top right corner of the embed playlist\r\n      </div>\r\n    </div>\r\n\r\n    */\r\n    this.insertBefore(\r\n      khpCtn.querySelector('.plyr>.plyr__control'),\r\n      this.string2Node(`<div class='EmbedKHPPlaylist hidden' key='${uniqueKey}'><div></div></div>`),\r\n    );\r\n    this.d(`.EmbedKHPPlaylist[key='${uniqueKey}']>div`).appendChild(this.d(`.KHPPlaylistContainer[key='${uniqueKey}']`).cloneNode(true));\r\n\r\n    // Nút ẩn/hiện embed playlist ở thanh điều khiển của Plyr\r\n    // Toggle embed playlist btn in Plyr's control bar\r\n    this.d(`.EmbedKHPPlaylist[key='${uniqueKey}']>div`).appendChild(this.string2Node(/* html */`\r\n      <div class=\"closeEmbed\">\r\n        <svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"times-circle\" class=\"svg-inline--fa fa-times-circle fa-w-16\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z\"></path></svg>\r\n      </div>`));\r\n    this.d(`.EmbedKHPPlaylist[key='${uniqueKey}']>div>.KHPPlaylistContainer`).classList.remove('KHPPlaylistContainer');\r\n\r\n    // Event đóng embed playlist\r\n    // Event close embed playlist\r\n    khpCtn.querySelector(' .plyr__video-wrapper').addEventListener('click', () => {\r\n      this.toggleEmbedPlayllist(uniqueKey, true);\r\n    });\r\n    khpCtn.querySelector('.closeEmbed').addEventListener('click', () => {\r\n      this.toggleEmbedPlayllist(uniqueKey, true);\r\n    });\r\n    // #endregion\r\n  },\r\n  // Function đổi tập. Thay vì loop epindex như trước, gây một vài vấn đề về tương thích, mình tách luôn ra thành function riêng.\r\n\r\n  async changeEp(elem, epIndex) {\r\n    const\r\n      // Lấy uniqueKey từ <ul> đã nhồi nhét sẵn\r\n      uniqueKey = await elem.parentNode.getAttribute('key');\r\n    // Viết tắt của uniqueKeySelector\r\n    const khpCtn = this.id(uniqueKey);\r\n\r\n    // -- Highlight <li> đang phát --\r\n    // -- Highlight playing <li> --\r\n    for (const ep of khpCtn.querySelector('.KHPPlaylistContainer').querySelectorAll('li')) ep.removeAttribute('playing');\r\n    khpCtn.querySelectorAll('.KHPPlaylistContainer li')[epIndex].setAttribute('playing', '');\r\n    // #endregion\r\n\r\n    // -- Dữ liệu episode cần init --\r\n    // -- Episode's data need to init --\r\n    const currData = this.data[uniqueKey][epIndex];\r\n\r\n    // Chuyển từ tập này sang tập khác qua API .source của Plyr thì được, nhưng nhảy qua nhảy lại giữa source HLS với Plyr thì không. Cách giải quyết đơn giản nhất là destroy() luôn cái Plyr player đang phát rồi init lại cái mới.\r\n    // It's perfectly fine when switching between episodes using Plyr's .source API, but not when HLS get involved. So the quickest/easiest way is to destroy() current Plyr and init a new one.\r\n    this.plyr[uniqueKey][0].destroy();\r\n    this.plyr[uniqueKey] = await this.initPlyr(uniqueKey, currData.previewThumbnails);\r\n    this.tweaks(uniqueKey);\r\n\r\n    // Check dữ liệu xem dùng Plyr hay HLS để load dữ liệu.\r\n    // Check media type to determine using Plyr's API or HLS's one.\r\n    const currVideoTag = khpCtn.querySelector('video');\r\n    const currMedia = currData.sources[0];\r\n    if (currMedia.type.toUpperCase() === 'M3U8') {\r\n      this.m3u8(currVideoTag, currMedia.src);\r\n      // Không như Plyr, HLS chỉ có tác dụng load file m3u8, phụ đề phải thêm thủ công.\r\n      // Unlike Plyr, HLS only load m3u8 file, captions must be manually adding.\r\n      if (currData.tracks) {\r\n        for (const track of currData.tracks) this.addSubsForLibsPlayer(currVideoTag, track);\r\n      }\r\n    } else {\r\n      this.plyr[uniqueKey][0].source = currData;\r\n      this.plyr[uniqueKey][0].play();\r\n    }\r\n\r\n    // -- Giới hạn chiều cao của các danh sách chọn phụ đề, độ phân giải, tốc độ --\r\n    // #region -- Limit Plyr's menu height inside Plyr's div --\r\n    const limitPlyrListHeight = (type) => {\r\n      const\r\n        selectPlyr = khpCtn.querySelector('.plyr');\r\n      const typeSelect = selectPlyr.querySelector(`button[data-plyr=\"${type}\"]`);\r\n      if (typeSelect) {\r\n        const typeSelectCtn = typeSelect.parentNode;\r\n        const setMaxHeight = () => typeSelectCtn.style.maxHeight = `calc(${parseInt(window.getComputedStyle(selectPlyr).height, 10)}px - 105px)`;\r\n        setMaxHeight();\r\n        window.addEventListener('resize', () => setMaxHeight());\r\n        typeSelectCtn.style.overflow = 'auto';\r\n        typeSelectCtn.classList.add('custom_scrollbar');\r\n      }\r\n    };\r\n    const loopCheckMediaLoaded = setInterval(() => {\r\n      if (khpCtn.querySelector('.plyr video').readyState === 4) {\r\n        for (const item of ['language', 'speed', 'quality']) limitPlyrListHeight(item);\r\n        clearInterval(loopCheckMediaLoaded);\r\n      }\r\n    }, 500);\r\n    // #endregion\r\n\r\n    // -- Tự động next khi hết tập --\r\n    // #region -- Autoplay next episode --\r\n    this.plyr[uniqueKey][0].on('ended', function() {\r\n      // nextElementSubling/nextSibling: https://stackoverflow.com/a/24226603\r\n      const current_episode = KHPlayer.selectCurrEp(uniqueKey);\r\n      const next_episode = current_episode.nextElementSibling;\r\n      // Source: https://www.w3schools.com/jsref/met_html_click.asp\r\n      if (next_episode) next_episode.click();\r\n    });\r\n    // #endregion\r\n\r\n    // #region -- Lưu thời gian video đang xem mỗi 1 giây vào localStorage --\r\n    // Tạo interval rỗng -> clear đi -> tạo lại cái mới, tránh dẫn đến việc nhiều cái setInterval khác nhau mỗi khi đổi tập.\r\n    // Create empty interval -> clear -> create new one to avoid duplicate interval when switching episodes.\r\n    const historyPlayingIndicator = this.data[uniqueKey][this.data[uniqueKey].length - 1];\r\n    let saveCurrTimeEp = setInterval(function() { }, 1000);\r\n    clearInterval(saveCurrTimeEp);\r\n    saveCurrTimeEp = setInterval(() => {\r\n      if (khpCtn.querySelector('.plyr video').readyState === 4) {\r\n        localStorage.setItem('khplayer_playing_' + historyPlayingIndicator, JSON.stringify({\r\n          epIndex: epIndex,\r\n          time: Math.round(KHPlayer.plyr[uniqueKey][0].currentTime),\r\n        }));\r\n      }\r\n    }, 1000);\r\n    // #endregion\r\n\r\n    const adjustSpeed = () => {\r\n      // console.log(this.plyr[uniqueKey][0].speed);\r\n      if (event.shiftKey && event.keyCode == '190') this.plyr[uniqueKey][0].speed += 0.5;\r\n      if (event.shiftKey && event.keyCode == '188') this.plyr[uniqueKey][0].speed -= 0.5;\r\n    };\r\n    khpCtn.removeEventListener('keydown', adjustSpeed);\r\n    khpCtn.addEventListener('keydown', adjustSpeed);\r\n\r\n    // Source: https://github.com/richtr/NoSleep.js\r\n    // Giữ màn hình điện thoại luôn sáng khi đang phát\r\n    const noSleep = new NoSleep();\r\n    // this.plyr[uniqueKey][0].on('stopped', () => {\r\n    //     noSleep.disable();\r\n    //     console.log(\"paused\");\r\n    // });\r\n    // this.plyr[uniqueKey][0].on('playing', () => {\r\n    //     noSleep.enable();\r\n    // });\r\n    noSleep.enable();\r\n  },\r\n  toggleEmbedPlayllist(uniqueKey, hideOnly = false) {\r\n    const elem = this.d(`.EmbedKHPPlaylist[key='${uniqueKey}']`);\r\n    if (hideOnly) {\r\n      elem.classList.add('hidden');\r\n    } else {\r\n      if (elem.classList.contains('hidden')) {\r\n        elem.classList.remove('hidden');\r\n      } else {\r\n        elem.classList.add('hidden');\r\n      }\r\n    }\r\n  },\r\n  insertAfter(elem, data, string2Elem = false) {\r\n    // Source: https://github.com/nefe/You-Dont-Need-jQuery#3.7\r\n    if (elem) {\r\n      if (!string2Elem) elem.parentNode.insertBefore(data, elem.nextSibling);\r\n      if (string2Elem) elem.parentNode.insertBefore(this.string2Node(data), elem.nextSibling);\r\n    }\r\n  },\r\n  insertBefore(elem, data, string2Elem = false) {\r\n    if (string2Elem) elem.parentNode.insertBefore(this.string2Node(data), elem);\r\n    if (!string2Elem) elem.parentNode.insertBefore(data, elem);\r\n  },\r\n  selectCurrEp(uniqueKey) {\r\n    return this.d(`#${uniqueKey} .KHPPlaylistContainer li[playing]`);\r\n  },\r\n  navigateEp(elem, nextOrPrev) {\r\n    const uniqueKey = elem.parentNode.parentNode.parentNode.getAttribute('id');\r\n    const currEp = this.selectCurrEp(uniqueKey);\r\n    if (!currEp) document.querySelectorAll('#' + uniqueKey + ' .KHPPlaylistContainer li')[0].click();\r\n    if (currEp) {\r\n      const\r\n        nextEp = currEp.nextElementSibling;\r\n      const prevEp = currEp.previousElementSibling;\r\n      if (nextOrPrev === 'next') {\r\n        if (nextEp) nextEp.click();\r\n      }\r\n      if (nextOrPrev === 'prev') {\r\n        if (!prevEp) currEp.click();\r\n        if (prevEp) prevEp.click();\r\n      }\r\n    }\r\n  },\r\n  acceptContinue(uniqueKey, epIndex, time) {\r\n    const khpCtn = this.id(uniqueKey);\r\n    khpCtn.querySelectorAll(`.KHPPlaylistContainer li`)[epIndex].click();\r\n    const tempLoop = setInterval(() => {\r\n      if (khpCtn.querySelector(`.plyr video`).readyState === 4) {\r\n        KHPlayer.plyr[uniqueKey][0].currentTime = time;\r\n        clearInterval(tempLoop);\r\n      }\r\n    }, 100);\r\n  },\r\n  rejectContinue(elem) {\r\n    elem.parentNode.parentNode.parentNode.classList.add('hideAlert');\r\n    elem.parentNode.parentNode.parentNode.parentNode.querySelector('.plyr__controls').removeAttribute('hidden');\r\n  },\r\n  m3u8(elem, source) {\r\n    if (Hls.isSupported()) {\r\n      const hls = new Hls();\r\n      hls.loadSource(source);\r\n      hls.attachMedia(elem);\r\n      hls.on(Hls.Events.MANIFEST_PARSED, () => elem.play());\r\n    } else {\r\n      console.log(new Error('HLS.js is required for playback M3U8 media'));\r\n    }\r\n  },\r\n  // Source: http://youmightnotneedjquery.com/\r\n  getJSON(url) {\r\n    return new Promise((resolve) => {\r\n      let request = new XMLHttpRequest();\r\n      request.open('GET', url, true);\r\n      request.onreadystatechange = function() {\r\n        if (this.readyState === 4) {\r\n          if (this.status >= 200 && this.status < 400) {\r\n            resolve(JSON.parse(this.responseText));\r\n          } else {\r\n            resolve(void 0);\r\n          }\r\n        }\r\n      };\r\n      request.send();\r\n      request = null;\r\n    });\r\n  },\r\n  addSubsForLibsPlayer(elem, data) {\r\n    elem.appendChild(this.string2Node(`<track kind=\"subtitles\" label=\"${data.label}\" srclang=\"${data.srclang}\" src=\"${data.src}\">`));\r\n  },\r\n  // Source: https://stackoverflow.com/a/35385518\r\n  string2Node(html) {\r\n    const template = document.createElement('template');\r\n    html = html.trim(); // Never return a text node of whitespace as the result\r\n    template.innerHTML = html;\r\n    return template.content.firstChild;\r\n  },\r\n  // Source: https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript\r\n  loadCSS(url) {\r\n    const link = document.createElement('link');\r\n    link.rel = 'stylesheet';\r\n    link.type = 'text/css';\r\n    link.href = url;\r\n    document.head.appendChild(link);\r\n  },\r\n  loadJS(url, callback) {\r\n    // loadScript(url, callback) {\r\n    // return new Promise(resolve => {\r\n    const script = document.createElement('script');\r\n    script.type = 'text/javascript';\r\n    script.src = url;\r\n\r\n    // There are several events for cross browser compatibility.\r\n    script.onreadystatechange = callback;\r\n    script.onload = callback;\r\n\r\n    // Fire the loading\r\n    document.head.appendChild(script);\r\n    // });\r\n\r\n    // }\r\n  },\r\n  currNode: document.currentScript,\r\n  customConfigPath: document.currentScript.getAttribute('config'),\r\n  configurator: {\r\n    defaultQuality: 1080,\r\n    seekTime: 5,\r\n    invertTime: false,\r\n    captions: {\r\n      active: true,\r\n      language: 'auto',\r\n      update: true,\r\n    },\r\n    tooltips: {\r\n      controls: true,\r\n      seek: true,\r\n    },\r\n    defaultPoster: 'https://cdn.jsdelivr.net/gh/DELNEGEND/khplayer/dist/default_wating.svg',\r\n    blankVideo: 'https://cdn.jsdelivr.net/gh/DELNEGEND/khplayer/dist/blank.mp4',\r\n  },\r\n  // All videos' jsons' data\r\n  data: {},\r\n  // for Plyr to interact\r\n  plyr: {},\r\n};\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n  const configURL = KHPlayer.customConfigPath;\r\n  let customConfigData = {};\r\n  let lang = {};\r\n  const lang_vi = {\r\n    i18n: {\r\n      restart: 'Khởi động lại',\r\n      rewind: 'Tua trước {seektime}s',\r\n      play: 'Phát',\r\n      pause: 'Tạm dừng',\r\n      fastForward: 'Tua tới {seektime}s',\r\n      seek: 'Tua',\r\n      seekLabel: '{currentTime} của {duration}',\r\n      played: 'Đã phát',\r\n      buffered: 'Đã tải trước',\r\n      currentTime: 'Thời gian bây giờ',\r\n      duration: 'Thời lượng',\r\n      volume: 'Âm lượng',\r\n      mute: 'Tắt tiếng',\r\n      unmute: 'Bật tiếng',\r\n      enableCaptions: 'Bật phụ đề',\r\n      disableCaptions: 'Tắt phụ đề',\r\n      download: 'Tải xuống',\r\n      enterFullscreen: 'Toàn màn hình',\r\n      exitFullscreen: 'Thoát toàn màn hình',\r\n      frameTitle: 'Trình phát cho {title}',\r\n      captions: 'Phụ đề',\r\n      settings: 'Cài đặt',\r\n      pip: 'PIP',\r\n      menuBack: 'Quay lại',\r\n      speed: 'Tốc độ',\r\n      normal: 'Bình thường',\r\n      quality: 'Chất lượng',\r\n      loop: 'Lặp',\r\n      start: 'Bắt đầu',\r\n      end: 'Kết thúc',\r\n      all: 'Tất cả',\r\n      reset: 'Khởi động lại',\r\n      disabled: 'Tắt',\r\n      enabled: 'Bật',\r\n      advertisement: 'Quảng cáo',\r\n      qualityBadge: {\r\n        2160: '4K',\r\n        1440: 'HD',\r\n        1080: 'HD',\r\n        720: 'HD',\r\n        576: 'SD',\r\n        480: 'SD',\r\n      },\r\n      nextEpisode: 'Tập tiếp theo',\r\n      previousEpisode: 'Tập trước',\r\n      toggleEmbedPlayllist: 'Danh sách tập',\r\n      continueWatchingConfirm: {\r\n        yes: 'Tiếp tục',\r\n        no: 'Xem từ đầu',\r\n        continueWatching: 'Đang xem',\r\n        at: 'tại',\r\n        confirm: '',\r\n      },\r\n    },\r\n  };\r\n  const lang_en = {\r\n    i18n: {\r\n      nextEpisode: 'Next episode',\r\n      previousEpisode: 'Previous episode',\r\n      toggleEmbedPlayllist: 'Episode list',\r\n      continueWatchingConfirm: {\r\n        yes: 'Continue',\r\n        no: 'Watch from begin',\r\n        continueWatching: 'You were watching',\r\n        at: 'at',\r\n        confirm: '',\r\n      },\r\n    },\r\n  };\r\n\r\n  if (configURL) customConfigData = await KHPlayer.getJSON(configURL) || {};\r\n\r\n  if (KHPlayer.currNode.getAttribute('vi') !== null) {\r\n    lang = lang_vi;\r\n  } else {\r\n    lang = lang_en;\r\n  }\r\n\r\n  KHPlayer.configurator = {\r\n    ...KHPlayer.configurator,\r\n    ...lang,\r\n    ...customConfigData,\r\n  };\r\n\r\n  if (KHPlayer.currNode.getAttribute('data')) {\r\n    KHPlayer.one();\r\n  } else {\r\n    for await (const elem of document.querySelectorAll('khplayer-container')) {\r\n      // Assign uniqueKey to avoid conflic between multiple khplayer-container when changeEp() or cloning playlist into embed playlist\r\n      // Gán uniqueKey để tránh xung đột với các khplayer-container khác khi chuyển tập hay clone playlist lên embed playlist\r\n      const uniqueKey = KHPlayer.randomString();\r\n      elem.setAttribute('id', uniqueKey);\r\n      KHPlayer.init(uniqueKey);\r\n    }\r\n  }\r\n});\r\n"],"file":"khplayer.min.js"}